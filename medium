
// 2. Add Two Numbers

/**
 * Definition for singly-linked list.
 * class ListNode {
 *   int val;
 *   ListNode? next;
 *   ListNode([this.val = 0, this.next]);
 * }
 */
class Solution {
  ListNode? addTwoNumbers(ListNode? l1, ListNode? l2) {
      var newL1 = [];
      var newL2 = [];
      var finalListNode = ListNode();
      while (l1 != null){        
              newL1.insert(0,l1.val);
              l1 = l1.next;  
      }
      while (l2 != null){
              newL2.insert(0,l2.val);
              l2 = l2.next; 
      }
    
     final sum = ( BigInt.parse(newL1.join('')) +  BigInt.parse(newL2.join('')) );
     final reversedSumList = sum.toString().split('').reversed;
     final nodes = reversedSumList.map((e)=>ListNode(int.parse(e))).toList();

     for(var i =0 ; i<nodes.length-1; i++){
             nodes[i].next = nodes[i+1];
     }
     finalListNode = nodes[0];

     return finalListNode;
  }
}




// 3. Longest Substring Without Repeating Characters

class Solution {
  int lengthOfLongestSubstring(String s) {
      int ans = 0;
      int left = 0;
      Set<String> charSet = {};

  for (int right = 0; right < s.length; right++) {
    while (charSet.contains(s[right])) {
      charSet.remove(s[left]);
      left++;
    }
    charSet.add(s[right]);
    ans = ans > right - left + 1 ? ans : right - left + 1;
  }
  return ans;

  }
}


// 5. Longest Palindromic Substring

class Solution {
  int lo = 0, maxLen = 0;
  String longestPalindrome(String inputTest) {
    if (inputTest.isEmpty) {
      return "";
    }
    if (inputTest.length < 2) {
      return inputTest;
    }
    List<String> items = inputTest.split('');
    for (int i = 0; i < items.length - 1; i++) {
      extendPalindrome(items, i, i);
      extendPalindrome(items, i, i + 1);
    }
    return inputTest.substring(lo, lo + maxLen);
  }

  void extendPalindrome(List<String> s, int j, int k) {
    while (j >= 0 && k < s.length && s[j] == s[k]) {
      j--;
      k++;
    }
    if (maxLen < k - j - 1) {
      lo = j + 1;
      maxLen = k - j - 1;
    }
  }
}